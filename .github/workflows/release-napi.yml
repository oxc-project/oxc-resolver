name: Release NAPI

permissions: {}

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - package.json

env:
  DEBUG: napi:*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - name: Check version changes
        uses: EndBug/version-check@36ff30f37c7deabe56a30caa043d127be658c425 # v2.1.5
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/unrs-resolver@latest/package.json
          file-name: package.json

      - name: Set version name
        if: steps.version.outputs.changed == 'true'
        env:
          version: ${{ steps.version.outputs.version }}
        run: echo "version=${version}"

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm build
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build
          - os: windows-latest
            target: i686-pc-windows-msvc
            architecture: x86
            cpu: ia32
            build: pnpm build
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm build -x
          - os: ubuntu-latest
            target: aarch64-linux-android
            build: pnpm build
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: pnpm build -x
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            architecture: x86
            build: pnpm build
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: pnpm build -x
          - os: ubuntu-latest
            target: powerpc64le-unknown-linux-gnu
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            build: |-
              sudo apt-get update &&
              sudo apt-get install gcc-riscv64-linux-gnu g++-riscv64-linux-gnu -y &&
              export CC=riscv64-linux-gnu-gcc &&
              export CXX=riscv64-linux-gnu-g++ &&
              pnpm build
          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-musl
            build: pnpm build -x
          - os: ubuntu-latest
            target: s390x-unknown-linux-gnu
            build: export CFLAGS="-fuse-ld=lld" && pnpm build --use-napi-cross
          - os: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build
          - os: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build
          - os: ubuntu-latest
            target: wasm32-wasip1-threads
            build: pnpm build

    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: ./.github/actions/pnpm
        with:
          architecture: ${{ matrix.architecture }}
          cpu: ${{ matrix.cpu }}

      - run: rustup target add ${{ matrix.target }}

      - uses: goto-bus-stop/setup-zig@abea47f85e598557f500fa1fd2ab7464fcb39406 # v2.2.1
        if: ${{ contains(matrix.target, 'musl') }}
        with:
          version: 0.13.0

      - name: Build
        run: ${{ matrix.build }} --target ${{ matrix.target }}
        shell: bash
        env:
          CC: clang # for mimalloc

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: bindings-${{ matrix.target }}
          path: |
            napi/*.node
            napi/*.wasm

  build-freebsd:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    name: Build FreeBSD
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - name: Build
        id: build
        uses: cross-platform-actions/action@97419d18f6470332677e345e9df97cdc71244ead # v0.28.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: 14.2
          memory: 8G
          cpu_count: 3
          environment_variables: DEBUG RUSTUP_IO_THREADS
          shell: bash
          run: |
            sudo pkg install -y -f curl libnghttp2 node22 npm cmake
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            pwd
            ls -lah
            whoami
            env
            export COREPACK_INTEGRITY_KEYS=0
            sudo corepack enable
            pnpm install
            pnpm build --target x86_64-unknown-freebsd
            rm -rf node_modules
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bindings-freebsd
          path: napi/*.node
          if-no-files-found: error

  publish:
    name: Publish NAPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write # for `npm publish --provenance`
    needs:
      - build
      - build-freebsd
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: .node-version
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: artifacts

      - name: Prepare dirs and artifacts
        run: |
          cp package.json napi/package.json
          pnpm napi create-npm-dirs
          pnpm napi artifacts --npm-dir npm --build-output-dir napi

      - name: Publish npm packages as latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          pnpm napi pre-publish --no-gh-release --tagstyle npm --npm-dir npm

          # Publish root package
          cp package.json napi/package.json
          cp README.md napi/README.md
          npm publish napi/ --tag latest --provenance --access public
