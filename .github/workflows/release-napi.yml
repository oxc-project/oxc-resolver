name: Release NAPI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - npm/package.json # Please only commit this file, so we don't need to wait for test CI to pass.

env:
  DEBUG: napi:*
  APP_NAME: unrs-resolver
  OXC_LOG: debug
  MACOSX_DEPLOYMENT_TARGET: 10.13
  CC: clang

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1

      - name: Check version changes
        uses: EndBug/version-check@36ff30f37c7deabe56a30caa043d127be658c425 # v2
        id: version
        with:
          static-checking: localIsNew
          file-url: https://cdn.jsdelivr.net/npm/unrs-resolver@latest/package.json
          file-name: npm/package.json

      - name: Set version name
        if: steps.version.outputs.changed == 'true'
        env:
          version: ${{ steps.version.outputs.version }}
        run: echo "version=${version}"

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm build
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            build: pnpm build
          - os: windows-latest
            target: i686-pc-windows-msvc
            architecture: x86
            build: pnpm build
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm build -x
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: pnpm build -x
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: pnpm build -x
          - os: ubuntu-latest
            target: powerpc64le-unknown-linux-gnu
            build: pnpm build --use-napi-cross
          - os: ubuntu-latest
            target: s390x-unknown-linux-gnu
            build: export CFLAGS="-fuse-ld=lld" && pnpm build --use-napi-cross
          - os: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build
          - os: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build
          - os: ubuntu-latest
            target: wasm32-wasip1-threads
            build: pnpm build

    name: Package ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1

      - uses: ./.github/actions/pnpm
        with:
          architecture: ${{ matrix.architecture }}

      - run: rustup target add ${{ matrix.target }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.target, 'musl') }}
        with:
          version: 0.13.0

      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@daa3c1f1f9a9d46f686d9fc2f65773d0c293688b # v2
        if: ${{ contains(matrix.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild

      - name: Build
        run: ${{ matrix.build }} --target ${{ matrix.target }}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: bindings-${{ matrix.target }}
          path: |
            napi/*.node
            napi/*.wasm
          if-no-files-found: error

  build-freebsd:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    name: Build FreeBSD
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1
      - name: Build
        id: build
        uses: cross-platform-actions/action@fe0167d8082ac584754ef3ffb567fded22642c7d # v0.27.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: "14.2"
          memory: 8G
          cpu_count: 3
          environment_variables: "DEBUG RUSTUP_IO_THREADS"
          shell: bash
          run: |
            sudo pkg install -y -f curl libnghttp2 node22 npm cmake
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            pwd
            ls -lah
            whoami
            env
            export COREPACK_INTEGRITY_KEYS=0
            sudo corepack enable
            pnpm install
            pnpm build --target x86_64-unknown-freebsd
            rm -rf node_modules
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: bindings-freebsd
          path: napi/*.node
          if-no-files-found: error

  publish:
    name: Publish NAPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write # for `npm publish --provenance`
    needs:
      - build
      - build-freebsd
    env:
      COREPACK_INTEGRITY_KEYS: 0
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1

      - name: Install pnpm
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4
        with:
          node-version-file: .node-version
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download Artifacts
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
        with:
          path: artifacts

      - name: Prepare dirs and artifacts
        run: |
          pnpm napi create-npm-dirs --package-json-path npm/package.json
          pnpm napi artifacts --package-json-path npm/package.json --build-output-dir napi

      - name: Publish npm packages as latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        shell: bash
        run: |
          cp napi/index.js npm/index.js
          cp napi/index.d.ts npm/index.d.ts
          cp napi/browser.js npm/browser.js
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          pnpm napi pre-publish --no-gh-release -t npm --package-json-path npm/package.json
          npm publish npm/ --tag latest --provenance --access public
